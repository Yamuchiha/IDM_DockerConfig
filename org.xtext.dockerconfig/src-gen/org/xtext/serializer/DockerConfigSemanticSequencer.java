/*
 * generated by Xtext 2.35.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import dockerConfig.DockerConfigPackage;
import dockerConfig.Port;
import dockerConfig.Service;
import dockerConfig.Volume;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.services.DockerConfigGrammarAccess;

@SuppressWarnings("all")
public class DockerConfigSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DockerConfigGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DockerConfigPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DockerConfigPackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case DockerConfigPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case DockerConfigPackage.VOLUME:
				sequence_Volume(context, (Volume) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     (hostPort=EString? containerPort=EString?)
	 * </pre>
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         image=EString? 
	 *         ports+=Port 
	 *         ports+=Port* 
	 *         volumes+=Volume 
	 *         volumes+=Volume*
	 *     )
	 * </pre>
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Volume returns Volume
	 *
	 * Constraint:
	 *     (hostPath=EString? containerPath=EString?)
	 * </pre>
	 */
	protected void sequence_Volume(ISerializationContext context, Volume semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
