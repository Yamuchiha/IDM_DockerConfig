/*
 * generated by Xtext 2.35.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DockerConfigGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DockerConfig.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImageKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImageAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImageEStringParserRuleCall_3_1_0 = (RuleCall)cImageAssignment_3_1.eContents().get(0);
		private final Keyword cPortsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortsPortParserRuleCall_6_0 = (RuleCall)cPortsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPortsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_7_1_0 = (RuleCall)cPortsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cVolumesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cVolumesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cVolumesVolumeParserRuleCall_11_0 = (RuleCall)cVolumesAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cVolumesAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cVolumesVolumeParserRuleCall_12_1_0 = (RuleCall)cVolumesAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Service returns Service:
		//    'Service'
		//    name=EString
		//    '{'
		//        ('image' image=EString)?
		//        'ports' '{' ports+=Port ( "," ports+=Port)* '}'
		//        'volumes' '{' volumes+=Volume ( "," volumes+=Volume)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Service'
		//name=EString
		//'{'
		//    ('image' image=EString)?
		//    'ports' '{' ports+=Port ( "," ports+=Port)* '}'
		//    'volumes' '{' volumes+=Volume ( "," volumes+=Volume)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('image' image=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'image'
		public Keyword getImageKeyword_3_0() { return cImageKeyword_3_0; }
		
		//image=EString
		public Assignment getImageAssignment_3_1() { return cImageAssignment_3_1; }
		
		//EString
		public RuleCall getImageEStringParserRuleCall_3_1_0() { return cImageEStringParserRuleCall_3_1_0; }
		
		//'ports'
		public Keyword getPortsKeyword_4() { return cPortsKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//ports+=Port
		public Assignment getPortsAssignment_6() { return cPortsAssignment_6; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_6_0() { return cPortsPortParserRuleCall_6_0; }
		
		//( "," ports+=Port)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_7_1() { return cPortsAssignment_7_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_7_1_0() { return cPortsPortParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'volumes'
		public Keyword getVolumesKeyword_9() { return cVolumesKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//volumes+=Volume
		public Assignment getVolumesAssignment_11() { return cVolumesAssignment_11; }
		
		//Volume
		public RuleCall getVolumesVolumeParserRuleCall_11_0() { return cVolumesVolumeParserRuleCall_11_0; }
		
		//( "," volumes+=Volume)*
		public Group getGroup_12() { return cGroup_12; }
		
		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//volumes+=Volume
		public Assignment getVolumesAssignment_12_1() { return cVolumesAssignment_12_1; }
		
		//Volume
		public RuleCall getVolumesVolumeParserRuleCall_12_1_0() { return cVolumesVolumeParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DockerConfig.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DockerConfig.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHostPortKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cHostPortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHostPortEStringParserRuleCall_3_1_0 = (RuleCall)cHostPortAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContainerPortKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainerPortAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainerPortEStringParserRuleCall_4_1_0 = (RuleCall)cContainerPortAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Port returns Port:
		//    {Port}
		//    'Port'
		//    '{'
		//        ('hostPort' hostPort=EString)?
		//        ('containerPort' containerPort=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Port}
		//'Port'
		//'{'
		//    ('hostPort' hostPort=EString)?
		//    ('containerPort' containerPort=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Port}
		public Action getPortAction_0() { return cPortAction_0; }
		
		//'Port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('hostPort' hostPort=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'hostPort'
		public Keyword getHostPortKeyword_3_0() { return cHostPortKeyword_3_0; }
		
		//hostPort=EString
		public Assignment getHostPortAssignment_3_1() { return cHostPortAssignment_3_1; }
		
		//EString
		public RuleCall getHostPortEStringParserRuleCall_3_1_0() { return cHostPortEStringParserRuleCall_3_1_0; }
		
		//('containerPort' containerPort=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'containerPort'
		public Keyword getContainerPortKeyword_4_0() { return cContainerPortKeyword_4_0; }
		
		//containerPort=EString
		public Assignment getContainerPortAssignment_4_1() { return cContainerPortAssignment_4_1; }
		
		//EString
		public RuleCall getContainerPortEStringParserRuleCall_4_1_0() { return cContainerPortEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VolumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.DockerConfig.Volume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVolumeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVolumeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHostPathKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cHostPathAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHostPathEStringParserRuleCall_3_1_0 = (RuleCall)cHostPathAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContainerPathKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainerPathAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainerPathEStringParserRuleCall_4_1_0 = (RuleCall)cContainerPathAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Volume returns Volume:
		//    {Volume}
		//    'Volume'
		//    '{'
		//        ('hostPath' hostPath=EString)?
		//        ('containerPath' containerPath=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Volume}
		//'Volume'
		//'{'
		//    ('hostPath' hostPath=EString)?
		//    ('containerPath' containerPath=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Volume}
		public Action getVolumeAction_0() { return cVolumeAction_0; }
		
		//'Volume'
		public Keyword getVolumeKeyword_1() { return cVolumeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('hostPath' hostPath=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'hostPath'
		public Keyword getHostPathKeyword_3_0() { return cHostPathKeyword_3_0; }
		
		//hostPath=EString
		public Assignment getHostPathAssignment_3_1() { return cHostPathAssignment_3_1; }
		
		//EString
		public RuleCall getHostPathEStringParserRuleCall_3_1_0() { return cHostPathEStringParserRuleCall_3_1_0; }
		
		//('containerPath' containerPath=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'containerPath'
		public Keyword getContainerPathKeyword_4_0() { return cContainerPathKeyword_4_0; }
		
		//containerPath=EString
		public Assignment getContainerPathAssignment_4_1() { return cContainerPathAssignment_4_1; }
		
		//EString
		public RuleCall getContainerPathEStringParserRuleCall_4_1_0() { return cContainerPathEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	private final ServiceElements pService;
	private final EStringElements pEString;
	private final PortElements pPort;
	private final VolumeElements pVolume;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DockerConfigGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pService = new ServiceElements();
		this.pEString = new EStringElements();
		this.pPort = new PortElements();
		this.pVolume = new VolumeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.DockerConfig".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Service returns Service:
	//    'Service'
	//    name=EString
	//    '{'
	//        ('image' image=EString)?
	//        'ports' '{' ports+=Port ( "," ports+=Port)* '}'
	//        'volumes' '{' volumes+=Volume ( "," volumes+=Volume)* '}'
	//    '}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Port returns Port:
	//    {Port}
	//    'Port'
	//    '{'
	//        ('hostPort' hostPort=EString)?
	//        ('containerPort' containerPort=EString)?
	//    '}';
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Volume returns Volume:
	//    {Volume}
	//    'Volume'
	//    '{'
	//        ('hostPath' hostPath=EString)?
	//        ('containerPath' containerPath=EString)?
	//    '}';
	public VolumeElements getVolumeAccess() {
		return pVolume;
	}
	
	public ParserRule getVolumeRule() {
		return getVolumeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
