/*
 * generated by Xtext 2.35.0
 */
grammar InternalDockerConfig;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.DockerConfigGrammarAccess;

}

@parser::members {

 	private DockerConfigGrammarAccess grammarAccess;

    public InternalDockerConfigParser(TokenStream input, DockerConfigGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Service";
   	}

   	@Override
   	protected DockerConfigGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleService
entryRuleService returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	iv_ruleService=ruleService
	{ $current=$iv_ruleService.current; }
	EOF;

// Rule Service
ruleService returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Service'
		{
			newLeafNode(otherlv_0, grammarAccess.getServiceAccess().getServiceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.DockerConfig.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='image'
			{
				newLeafNode(otherlv_3, grammarAccess.getServiceAccess().getImageKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getImageEStringParserRuleCall_3_1_0());
					}
					lv_image_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						set(
							$current,
							"image",
							lv_image_4_0,
							"org.xtext.DockerConfig.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='ports'
		{
			newLeafNode(otherlv_5, grammarAccess.getServiceAccess().getPortsKeyword_4());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getPortsPortParserRuleCall_6_0());
				}
				lv_ports_7_0=rulePort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					add(
						$current,
						"ports",
						lv_ports_7_0,
						"org.xtext.DockerConfig.Port");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getServiceAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getPortsPortParserRuleCall_7_1_0());
					}
					lv_ports_9_0=rulePort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"ports",
							lv_ports_9_0,
							"org.xtext.DockerConfig.Port");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_11='volumes'
		{
			newLeafNode(otherlv_11, grammarAccess.getServiceAccess().getVolumesKeyword_9());
		}
		otherlv_12='{'
		{
			newLeafNode(otherlv_12, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getVolumesVolumeParserRuleCall_11_0());
				}
				lv_volumes_13_0=ruleVolume
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					add(
						$current,
						"volumes",
						lv_volumes_13_0,
						"org.xtext.DockerConfig.Volume");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_14=','
			{
				newLeafNode(otherlv_14, grammarAccess.getServiceAccess().getCommaKeyword_12_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getVolumesVolumeParserRuleCall_12_1_0());
					}
					lv_volumes_15_0=ruleVolume
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"volumes",
							lv_volumes_15_0,
							"org.xtext.DockerConfig.Volume");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_13());
		}
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_14());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePort
entryRulePort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	iv_rulePort=rulePort
	{ $current=$iv_rulePort.current; }
	EOF;

// Rule Port
rulePort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPortAccess().getPortAction_0(),
					$current);
			}
		)
		otherlv_1='Port'
		{
			newLeafNode(otherlv_1, grammarAccess.getPortAccess().getPortKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPortAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='hostPort'
			{
				newLeafNode(otherlv_3, grammarAccess.getPortAccess().getHostPortKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPortAccess().getHostPortEStringParserRuleCall_3_1_0());
					}
					lv_hostPort_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPortRule());
						}
						set(
							$current,
							"hostPort",
							lv_hostPort_4_0,
							"org.xtext.DockerConfig.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='containerPort'
			{
				newLeafNode(otherlv_5, grammarAccess.getPortAccess().getContainerPortKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPortAccess().getContainerPortEStringParserRuleCall_4_1_0());
					}
					lv_containerPort_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPortRule());
						}
						set(
							$current,
							"containerPort",
							lv_containerPort_6_0,
							"org.xtext.DockerConfig.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPortAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleVolume
entryRuleVolume returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVolumeRule()); }
	iv_ruleVolume=ruleVolume
	{ $current=$iv_ruleVolume.current; }
	EOF;

// Rule Volume
ruleVolume returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVolumeAccess().getVolumeAction_0(),
					$current);
			}
		)
		otherlv_1='Volume'
		{
			newLeafNode(otherlv_1, grammarAccess.getVolumeAccess().getVolumeKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVolumeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='hostPath'
			{
				newLeafNode(otherlv_3, grammarAccess.getVolumeAccess().getHostPathKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVolumeAccess().getHostPathEStringParserRuleCall_3_1_0());
					}
					lv_hostPath_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVolumeRule());
						}
						set(
							$current,
							"hostPath",
							lv_hostPath_4_0,
							"org.xtext.DockerConfig.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='containerPath'
			{
				newLeafNode(otherlv_5, grammarAccess.getVolumeAccess().getContainerPathKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVolumeAccess().getContainerPathEStringParserRuleCall_4_1_0());
					}
					lv_containerPath_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVolumeRule());
						}
						set(
							$current,
							"containerPath",
							lv_containerPath_6_0,
							"org.xtext.DockerConfig.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getVolumeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
