/**
 * generated by Xtext 2.35.0
 */
package org.xtext.formatting2;

import com.google.inject.Inject;
import dockerConfig.Port;
import dockerConfig.Service;
import dockerConfig.Volume;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.services.DockerConfigGrammarAccess;

@SuppressWarnings("all")
public class DockerConfigFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DockerConfigGrammarAccess _dockerConfigGrammarAccess;

  protected void _format(final Service service, @Extension final IFormattableDocument document) {
    EList<Port> _ports = service.getPorts();
    for (final Port port : _ports) {
      document.<Port>format(port);
    }
    EList<Volume> _volumes = service.getVolumes();
    for (final Volume volume : _volumes) {
      document.<Volume>format(volume);
    }
  }

  public void format(final Object service, final IFormattableDocument document) {
    if (service instanceof XtextResource) {
      _format((XtextResource)service, document);
      return;
    } else if (service instanceof Service) {
      _format((Service)service, document);
      return;
    } else if (service instanceof EObject) {
      _format((EObject)service, document);
      return;
    } else if (service == null) {
      _format((Void)null, document);
      return;
    } else if (service != null) {
      _format(service, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(service, document).toString());
    }
  }
}
