/**
 * generated by Xtext 2.35.0
 */
package org.xtext.generator;

import com.google.common.collect.Iterables;
import dockerConfig.Port;
import dockerConfig.Service;
import dockerConfig.Volume;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DockerConfigGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Service> _filter = Iterables.<Service>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Service.class);
    for (final Service s : _filter) {
      String _name = s.getName();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(":");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("image:");
      String _image = s.getImage();
      _builder.append(_image, "\t\t\t ");
      _builder.newLineIfNotEmpty();
      {
        EList<Port> _ports = s.getPorts();
        for(final Port port : _ports) {
          _builder.append("\t\t\t ");
          _builder.append("ports:");
          _builder.newLine();
          _builder.append("\t\t\t ");
          _builder.append(" ");
          _builder.append("- \"");
          String _hostPort = port.getHostPort();
          _builder.append(_hostPort, "\t\t\t  ");
          _builder.append(":");
          String _containerPort = port.getContainerPort();
          _builder.append(_containerPort, "\t\t\t  ");
          _builder.append("\"");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Volume> _volumes = s.getVolumes();
        for(final Volume volume : _volumes) {
          _builder.append(" \t\t\t ");
          _builder.append("volumes:");
          _builder.newLine();
          _builder.append(" \t\t\t ");
          _builder.append(" ");
          _builder.append("- \"");
          String _hostPath = volume.getHostPath();
          _builder.append(_hostPath, " \t\t\t  ");
          _builder.append(":");
          String _containerPath = volume.getContainerPath();
          _builder.append(_containerPath, " \t\t\t  ");
          _builder.append("\"");
          _builder.newLineIfNotEmpty();
          _builder.append(" \t\t\t ");
        }
      }
      String _plus = (_name + _builder);
      fsa.generateFile("docker-compose.yml", _plus);
    }
  }
}
