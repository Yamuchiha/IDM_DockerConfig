/*
 * generated by Xtext 2.35.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalDockerConfigParser;
import org.xtext.services.DockerConfigGrammarAccess;

public class DockerConfigParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DockerConfigGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DockerConfigGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_3(), "rule__Service__Group_3__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_7(), "rule__Service__Group_7__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_12(), "rule__Service__Group_12__0");
			builder.put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
			builder.put(grammarAccess.getPortAccess().getGroup_3(), "rule__Port__Group_3__0");
			builder.put(grammarAccess.getPortAccess().getGroup_4(), "rule__Port__Group_4__0");
			builder.put(grammarAccess.getVolumeAccess().getGroup(), "rule__Volume__Group__0");
			builder.put(grammarAccess.getVolumeAccess().getGroup_3(), "rule__Volume__Group_3__0");
			builder.put(grammarAccess.getVolumeAccess().getGroup_4(), "rule__Volume__Group_4__0");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
			builder.put(grammarAccess.getServiceAccess().getImageAssignment_3_1(), "rule__Service__ImageAssignment_3_1");
			builder.put(grammarAccess.getServiceAccess().getPortsAssignment_6(), "rule__Service__PortsAssignment_6");
			builder.put(grammarAccess.getServiceAccess().getPortsAssignment_7_1(), "rule__Service__PortsAssignment_7_1");
			builder.put(grammarAccess.getServiceAccess().getVolumesAssignment_11(), "rule__Service__VolumesAssignment_11");
			builder.put(grammarAccess.getServiceAccess().getVolumesAssignment_12_1(), "rule__Service__VolumesAssignment_12_1");
			builder.put(grammarAccess.getPortAccess().getHostPortAssignment_3_1(), "rule__Port__HostPortAssignment_3_1");
			builder.put(grammarAccess.getPortAccess().getContainerPortAssignment_4_1(), "rule__Port__ContainerPortAssignment_4_1");
			builder.put(grammarAccess.getVolumeAccess().getHostPathAssignment_3_1(), "rule__Volume__HostPathAssignment_3_1");
			builder.put(grammarAccess.getVolumeAccess().getContainerPathAssignment_4_1(), "rule__Volume__ContainerPathAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DockerConfigGrammarAccess grammarAccess;

	@Override
	protected InternalDockerConfigParser createParser() {
		InternalDockerConfigParser result = new InternalDockerConfigParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DockerConfigGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DockerConfigGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
